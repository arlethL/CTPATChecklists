name: CI - Build, Test (if any), Coverage (if any), Docker Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  # Dockerfile segÃºn tu estructura
  DOCKERFILE_PATH: CTPATChecklists/Dockerfile
  IMAGE_NAME: checklistctpat

jobs:
  build_test_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo tree (debug)
        run: |
          echo "== ROOT ==" && ls -la
          echo "== CTPATChecklists ==" && ls -la CTPATChecklists || true
          echo "== tests ==" && ls -la tests || true

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # ðŸ”Ž Detecta automÃ¡ticamente .sln o .csproj
      - name: Locate solution/project
        id: paths
        run: |
          SLN=$(find . -maxdepth 3 -name '*.sln' | head -n1)
          CSPROJ=$(find . -maxdepth 4 -name '*.csproj' | grep -i 'CTPATChecklists.csproj' | head -n1)
          if [ -z "$CSPROJ" ]; then
            CSPROJ=$(find . -maxdepth 4 -name '*.csproj' | head -n1)
          fi
          echo "Detected SLN: $SLN"
          echo "Detected CSPROJ: $CSPROJ"
          echo "sln=$SLN" >> $GITHUB_OUTPUT
          echo "csproj=$CSPROJ" >> $GITHUB_OUTPUT
          if [ -z "$SLN" ] && [ -z "$CSPROJ" ]; then
            echo "No .sln or .csproj found"; exit 1
          fi

      - name: Restore
        run: |
          if [ -n "${{ steps.paths.outputs.sln }}" ]; then
            echo "Restoring solution ${{ steps.paths.outputs.sln }}"
            dotnet restore "${{ steps.paths.outputs.sln }}"
          else
            echo "Restoring project ${{ steps.paths.outputs.csproj }}"
            dotnet restore "${{ steps.paths.outputs.csproj }}"
          fi

      - name: Build (Release)
        run: |
          if [ -n "${{ steps.paths.outputs.sln }}" ]; then
            dotnet build "${{ steps.paths.outputs.sln }}" -c Release --no-restore
          else
            dotnet build "${{ steps.paths.outputs.csproj }}" -c Release --no-restore
          fi

      # ðŸ§ª Tests + cobertura (solo si hay proyectos en /tests)
      - name: Run tests (if any) + coverage
        if: ${{ hashFiles('tests/**.csproj') != '' }}
        run: |
          find tests -name "*.csproj" | while read p; do
            echo "Running tests in $p"
            dotnet test "$p" -c Release --no-build \
              --collect:"XPlat Code Coverage" \
              --logger "trx;LogFileName=test_results.trx"
          done

      - name: Locate coverage file
        id: cov
        if: ${{ hashFiles('**/coverage.cobertura.xml') != '' }}
        run: |
          FILE=$(find . -type f -name 'coverage.cobertura.xml' | head -n 1)
          echo "file=$FILE"
          echo "file=$FILE" >> $GITHUB_OUTPUT

      - name: Install ReportGenerator
        if: steps.cov.outputs.file
        run: dotnet tool update -g dotnet-reportgenerator-globaltool

      - name: Generate coverage report + summary
        if: steps.cov.outputs.file
        env:
          PATH: $HOME/.dotnet/tools:${{ env.PATH }}
        run: |
          reportgenerator -reports:"${{ steps.cov.outputs.file }}" \
                          -targetdir:"coveragereport" \
                          -reporttypes:"HtmlInline;TextSummary"
          echo "### Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coveragereport/Summary.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage HTML
        if: steps.cov.outputs.file
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coveragereport

      - name: Ensure Dockerfile exists (debug)
        run: |
          test -f "${{ env.DOCKERFILE_PATH }}" || (echo "Dockerfile not found at ${{ env.DOCKERFILE_PATH }}" && exit 1)

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ env.DOCKERFILE_PATH }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
