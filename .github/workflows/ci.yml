name: CI - Build, Test (if any), Coverage (if any), Docker Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  WEB_PROJECT_PATH: CTPATChecklists/CTPATChecklists.csproj
  DOCKERFILE_PATH: CTPATChecklists/Dockerfile
  IMAGE_NAME: checklistctpat

jobs:
  build_test_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: |
          if [ -f "CTPATChecklists.sln" ]; then
            dotnet restore CTPATChecklists.sln
          else
            dotnet restore ${{ env.WEB_PROJECT_PATH }}
            if [ -d "tests" ]; then
              find tests -name "*.csproj" -print0 | xargs -0 -I{} dotnet restore "{}"
            fi
          fi

      - name: Build (Release)
        run: |
          if [ -f "CTPATChecklists.sln" ]; then
            dotnet build CTPATChecklists.sln -c Release --no-restore
          else
            dotnet build ${{ env.WEB_PROJECT_PATH }} -c Release --no-restore
          fi

      # Ejecuta tests SOLO si hay proyectos en /tests
      - name: Run tests (if any)
        if: ${{ hashFiles('tests/**.csproj') != '' }}
        run: |
          find tests -name "*.csproj" | while read p; do
            echo "Running tests in $p"
            dotnet test "$p" -c Release --no-build --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test_results.trx"
          done

      # Cobertura SOLO si se generó coverage.cobertura.xml
      - name: Locate coverage file
        id: cov
        if: ${{ hashFiles('**/coverage.cobertura.xml') != '' }}
        run: |
          FILE=$(find . -type f -name 'coverage.cobertura.xml' | head -n 1)
          echo "file=$FILE" >> $GITHUB_OUTPUT

      - name: Install ReportGenerator
        if: steps.cov.outputs.file
        run: dotnet tool update -g dotnet-reportgenerator-globaltool

      - name: Generate coverage report + summary
        if: steps.cov.outputs.file
        env:
          PATH: $HOME/.dotnet/tools:${{ env.PATH }}
        run: |
          reportgenerator -reports:"${{ steps.cov.outputs.file }}" -targetdir:"coveragereport" -reporttypes:"HtmlInline;TextSummary"
          echo "### Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coveragereport/Summary.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage HTML
        if: steps.cov.outputs.file
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coveragereport

      # Docker buildx + push (más estable que 'docker build' crudo)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ env.DOCKERFILE_PATH }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
