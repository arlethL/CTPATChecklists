@model CTPATChecklists.Models.Checklist
@{
    ViewData["Title"] = "Crear Checklist";
}

<h2>@ViewData["Title"]</h2>
<style>
    .img-preview {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .preview-container {
        position: relative;
        margin-right: 10px;
    }

        .preview-container input[type="radio"] {
            position: absolute;
            top: 5px;
            left: 5px;
            transform: scale(1.2);
        }

    .trailer-container {
        max-width: 100%;
        width: 100%;
        height: auto;
    }

    .punto-btn {
        color: white;
        font-weight: bold;
        border-radius: 6px;
        margin: 3px;
        border: none;
        padding: 0;
        text-align: center;
    }

    .btn-pendiente {
        background-color: #ffc107 !important; /* Amarillo */
    }

    .btn-completado {
        background-color: #28a745 !important; /* Verde */
    }

    /* 📱 Estilo móvil */
    @@media (max-width: 768px) {
        .punto-btn {
            width: 26px;
            height: 26px;
            font-size: 12px;
        }
    }

    /* 💻 Estilo escritorio */
    @@media (min-width: 769px) {
        .punto-btn {
            width: 35px;
            height: 35px;
            font-size: 14px;
        }
    }

    .firma-box {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
    }

        .firma-box button {
            width: 100%;
            max-width: 200px;
            height: 40px;
            white-space: nowrap;
        }

        .firma-box img {
            width: 120px;
            height: 150px;
            object-fit: contain;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-top: 8px;
        }
</style>




<form asp-action="Create" method="post" enctype="multipart/form-data">
    <!-- Ahora mostramos TODOS los mensajes de validación -->
    @if (!ViewData.ModelState.IsValid)
    {
    <div asp-validation-summary="All" class="alert alert-danger"></div>
    }

    <h4 class="mt-4">Datos de la Inspección</h4>

    <!-- Primera fila: Folios -->
    <div class="row">
        <div class="col-md-4 mb-3">
            <label asp-for="Empresa" class="form-label fw-bold">Empresa</label>
            <input asp-for="Empresa" class="form-control" placeholder="Nombre de la empresa" />
            <span asp-validation-for="Empresa" class="text-danger"></span>
        </div>

        <div class="col-md-4 mb-3">
            <label asp-for="FolioHojaViajera" class="form-label fw-bold">Folio de Hoja Viajera</label>
            <input asp-for="FolioHojaViajera" class="form-control" />
            <span asp-validation-for="FolioHojaViajera" class="text-danger"></span>
        </div>

        <div class="col-md-4 mb-3">
            <label asp-for="FolioInspeccionOrigen" class="form-label fw-bold">Folio de Inspección Origen</label>
            <input asp-for="FolioInspeccionOrigen" class="form-control" />
            <span asp-validation-for="FolioInspeccionOrigen" class="text-danger"></span>
        </div>

        <div class="col-md-4 mb-3">
            <label asp-for="FolioInspeccion" class="form-label fw-bold">Folio de la Inspección</label>
            <input asp-for="FolioInspeccion" class="form-control" />
            <span asp-validation-for="FolioInspeccion" class="text-danger"></span>
        </div>
    </div>


    <!-- Segunda fila: Caja, Línea, Placas, Estado -->
    <div class="row mt-3">
        <div class="col-md-3">
            <label asp-for="IdCajaTrailer">Caja No.</label>
            <input asp-for="IdCajaTrailer" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="Linea">Línea</label>
            <input asp-for="Linea" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="Placa">Placas</label>
            <input asp-for="Placa" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="Estado">Estado</label>
            <input asp-for="Estado" class="form-control" />
        </div>
    </div>

    <!-- Tercera fila: Sucursales y Fechas -->
    <div class="row mt-3">
        <div class="col-md-3">
            <label asp-for="SucursalOrigen">Sucursal Origen</label>
            <input asp-for="SucursalOrigen" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="FechaHoraSalida">Fecha/Hora Salida</label>
            <input asp-for="FechaHoraSalida" type="datetime-local" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="SucursalDestino">Sucursal Destino</label>
            <input asp-for="SucursalDestino" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="FechaHoraEntrada">Fecha/Hora Entrada</label>
            <input asp-for="FechaHoraEntrada" type="datetime-local" class="form-control" />
        </div>
    </div>

    <!-- Cuarta fila: Chofer y datos de inspección -->
    <div class="row mt-3">
        <div class="col-md-3">
            <label asp-for="Operador">Nombre del Chofer</label>
            <input asp-for="Operador" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="MarcaTractor">Tractor</label>
            <input asp-for="MarcaTractor" class="form-control" />
        </div>
        <div class="col-md-3">
            <label asp-for="HoraInicioInspeccion">Hora Inicio Inspección</label>
            <input asp-for="HoraInicioInspeccion" type="datetime-local" class="form-control" />

        </div>
        <div class="col-md-3">
            <label asp-for="HoraFinalInspeccion">Hora Final Inspección</label>
            <input asp-for="HoraFinalInspeccion" type="datetime-local" class="form-control" />
        </div>
    </div>

    <!-- Fianza -->
    <div class="row mt-3">
        <div class="col-md-3">
            <label asp-for="Fianza">Fianza</label>
            <input asp-for="Fianza" class="form-control" />
        </div>
    </div>

    <!-- Quinta fila: Datos del Remolque -->
    <hr />
    <h5 class="mt-4">Datos del Remolque</h5>
    <div class="row">
        <div class="col-md-3">
            <label asp-for="RemolqueAnio">Año</label>
            <input asp-for="RemolqueAnio" class="form-control" />
        </div>
        <div class="col-md-5">
            <label asp-for="RemolqueVIN">#VIN</label>
            <input asp-for="RemolqueVIN" class="form-control" />
        </div>
        <div class="col-md-4">
            <label asp-for="RemolqueMarca">Marca</label>
            <input asp-for="RemolqueMarca" class="form-control" />
        </div>
    </div>

    <!-- Sexta fila: Datos del Contenedor -->
    <h5 class="mt-4">Datos del Contenedor</h5>
    <div class="row">
        <div class="col-md-3">
            <label asp-for="ContenedorAnio">Año</label>
            <input asp-for="ContenedorAnio" class="form-control" />
        </div>
        <div class="col-md-5">
            <label asp-for="ContenedorVIN">#VIN</label>
            <input asp-for="ContenedorVIN" class="form-control" />
        </div>
        <div class="col-md-4">
            <label asp-for="ContenedorMarca">Marca</label>
            <input asp-for="ContenedorMarca" class="form-control" />
        </div>
    </div>

    <!-- Séptima fila: Sellos -->
    <h5 class="mt-4">Sellos</h5>
    <div class="row">
        <div class="col-md-4">
            <label asp-for="SelloCarga"># de sello cargada/vacía</label>
            <input asp-for="SelloCarga" class="form-control" />
        </div>
        <div class="col-md-4">
            <label asp-for="SelloAdicional">Sello adicional colocado</label>
            <input asp-for="SelloAdicional" class="form-control" />
        </div>
        <div class="col-md-4">
            <label asp-for="HoraLugarMotivoRetiroSello">Hora / Lugar / Motivo</label>
            <input asp-for="HoraLugarMotivoRetiroSello" class="form-control" />
        </div>
    </div>
    <!-- Octava fila: Tipo de movimiento -->

    <div class="mb-3">
        <label class="form-label fw-bold">Movimiento</label>
        <div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" asp-for="EsEntrada" value="true" id="entrada" />
                <label class="form-check-label" for="entrada">Entrada</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" asp-for="EsEntrada" value="false" id="salida" />
                <label class="form-check-label" for="salida">Salida</label>
            </div>
            <span asp-validation-for="EsEntrada" class="text-danger"></span>
        </div>
    </div>




    <h4 class="mt-4">Inspección Visual (17 Puntos)</h4>

    <div class="position-relative mb-4 mx-auto trailer-container">
        <img src="~/images/trailer.png" class="img-fluid border border-primary rounded" alt="Tráiler" />

        @for (int i = 0; i < Model.Puntos.Count; i++)
    {
        // Posiciones en porcentaje
        var (top, left) = i switch
        {
            0 => ("63%", "90%"),
            1 => ("45%", "85%"),
            2 => ("65%", "60%"),
            3 => ("63%", "75%"),
            4 => ("60%", "68%"),
            5 => ("50%", "72%"),
            6 => ("58%", "72%"),
            7 => ("55%", "78%"),
            8 => ("55%", "65%"),
            9 => ("30%", "60%"),
            10 => ("48%", "1%"),
            11 => ("53%", "15%"),
            12 => ("45%", "45%"),
            13 => ("45%", "68%"),
            14 => ("30%", "30%"),
            15 => ("36%", "70%"),
            16 => ("28%", "70%"),
            _ => ("0%", "0%")
        };

        <button type="button"
                class="btn punto-btn btn-pendiente"
                style="position: absolute; top: @top; left: @left;"
                data-toggle="modal"
                data-target="#modalPunto"
                data-index="@i">
            @(i + 1)
        </button>
    }
    </div>

    <div class="text-center mb-4">
        <h5 id="contadorPuntos">17 puntos restantes por llenar</h5>

    </div>




    <div class="form-group form-check">
        <input asp-for="IncluirFotoCamara" class="form-check-input" type="checkbox" id="checkCamaraIP" />
        <label class="form-check-label" asp-for="IncluirFotoCamara">¿Incluir imagen capturada desde la cámara IP?</label>
    </div>


    <div id="contenedorImagenesCamara" class="mt-3" style="display:none;">
        <label><strong>Seleccionar:</strong></label>
        <div id="imagenesCamaraPreview" class="d-flex flex-wrap gap-3"></div>
        <input type="hidden" id="fotoCamaraBase64" name="FotoDesdeCamara" />
    </div>



    <!-- Modal de previsualización de cámara -->
    <div class="modal fade" id="modalCamara" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Imagen desde cámara IP</h5>
                    <button type="button" class="close" data-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <img id="imagenCamara" class="img-fluid rounded shadow" src="#" alt="Cargando..." />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" onclick="$('#modalCamara').modal('hide')">
                        Aceptar imágenes capturadas
                    </button>

                </div>

            </div>
        </div>
    </div>


    <div class="modal fade" id="modalPunto" tabindex="-1" role="dialog" aria-labelledby="modalPuntoLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="modalPuntoLabel">Llenar punto</h5>
                    <button type="button" class="close text-white" data-dismiss="modal" aria-label="Cerrar">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="contenidoPunto">
                    <!-- Aquí se insertará dinámicamente el formulario del punto -->
                </div>
            </div>
        </div>
    </div>


    <div class="row text-center mb-4">

        <div class="row justify-content-center text-center mb-4">
            <div class="col-md-4 firma-box">
                <button type="button" class="btn btn-primary btn-sm" onclick="abrirModalFirma('OperadorOrigen')">Firma del Operador</button>
                <img id="imgFirmaOperadorOrigen" />
                <input type="hidden" name="FirmaOperadorOrigen" id="firmaOperadorOrigenInput" />
            </div>
            <div class="col-md-4 firma-box">
                <button type="button" class="btn btn-primary btn-sm" onclick="abrirModalFirma('Oficial')">Firma del Oficial</button>
                <img id="imgFirmaOficial" />
                <input type="hidden" name="FirmaOficial" id="firmaOficialInput" />
            </div>
            <div class="col-md-4 firma-box">
                <button type="button" class="btn btn-primary btn-sm" onclick="abrirModalFirma('Supervisor')">Firma del Supervisor </button>
                <img id="imgFirmaSupervisor" />
                <input type="hidden" name="FirmaSupervisor" id="firmaSupervisorInput" />
            </div>
        </div>


    </div>


    <div class="form-group text-center mt-4">
        <button type="submit" class="btn btn-primary btn-lg">
            Guardar Checklist
        </button>
    </div>
    @for (int i = 0; i < 17; i++)
{
    <input type="file"
           name="Puntos[@i].Foto"
           id="file-real-input-@i"
           class="d-none"
           accept="image/*" />
}

</form>




<!-- Modal de feedback -->
<div class="modal fade" id="feedbackModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header @(TempData["Action"]?.ToString() == "success"
                                 ? "bg-success text-white"
                                 : "bg-danger text-white")">
                <h5 class="modal-title">
                    @(TempData["Action"]?.ToString() == "success" ? "Éxito" : "Error")
                </h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body text-center">
                @if (TempData["Action"]?.ToString() == "success")
        {
                <p>¡Registro exitoso!</p>
        }
        else
        {
                <p>Han ocurrido errores:</p>
                <ul class="text-left">
                    @foreach (var err in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                    <li>@err.ErrorMessage</li>
            }
                </ul>
        }
            </div>
            <div class="modal-footer justify-content-center">
                <button type="button" class="btn btn-light" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Firma -->
<div class="modal fade" id="modalFirma" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Firmar</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body text-center">
                <canvas id="canvasFirma" style="border: 1px solid #000; touch-action: none;" width="600" height="200"></canvas>
                <div class="mt-3">
                    <button type="button" class="btn btn-warning btn-sm" onclick="limpiarFirma()">Limpiar</button>
                    <button type="button" class="btn btn-success btn-sm" onclick="guardarFirma()">Guardar Firma</button>
                </div>
            </div>
        </div>
    </div>
</div>


@using Newtonsoft.Json
@{
    var puntosJson = JsonConvert.SerializeObject(Model.Puntos);
    var completadosJson = JsonConvert.SerializeObject(ViewBag.Completados ?? new bool[Model.Puntos.Count]);
}

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        const puntos = @Html.Raw(puntosJson);
        const completados = @Html.Raw(completadosJson);


        // === Firma Digital ===

        let canvas, ctx, isDrawing = false, campoActual = "";

        // Abrir el modal y preparar el canvas
        function abrirModalFirma(campo) {
            campoActual = campo;
            $('#modalFirma').modal('show'); // ✅ Bootstrap 4
            setTimeout(initCanvas, 100);
        }


        function initCanvas() {
            canvas = document.getElementById('canvasFirma');
            ctx = canvas.getContext('2d');
            ctx.fillStyle = "white";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.strokeStyle = "black";
            ctx.lineWidth = 2;

            // PC
            canvas.onmousedown = e => { isDrawing = true; ctx.beginPath(); ctx.moveTo(e.offsetX, e.offsetY); };
            canvas.onmousemove = e => { if (isDrawing) { ctx.lineTo(e.offsetX, e.offsetY); ctx.stroke(); } };
            canvas.onmouseup = () => { isDrawing = false; };

            // Móvil/tablet
            canvas.ontouchstart = e => {
                e.preventDefault();
                isDrawing = true;
                const touch = e.touches[0];
                const rect = canvas.getBoundingClientRect();
                ctx.beginPath();
                ctx.moveTo(touch.clientX - rect.left, touch.clientY - rect.top);
            };
            canvas.ontouchmove = e => {
                e.preventDefault();
                if (isDrawing) {
                    const touch = e.touches[0];
                    const rect = canvas.getBoundingClientRect();
                    ctx.lineTo(touch.clientX - rect.left, touch.clientY - rect.top);
                    ctx.stroke();
                }
            };
            canvas.ontouchend = () => { isDrawing = false; };
        }

        function limpiarFirma() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = "white";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        }

        function guardarFirma() {
            const dataURL = canvas.toDataURL();
            document.getElementById(`imgFirma${campoActual}`).src = dataURL;
            document.getElementById(`firma${campoActual}Input`).value = dataURL;

            $('#modalFirma').modal('hide'); // ✅ Bootstrap 4
        }




        $(function () {
            const action = '@TempData["Action"]';

            if (action === 'success' || action === 'error') {
                $('#feedbackModal').modal('show');
            }

            completados.forEach((val, i) => {
                if (val) {
                    $(`.punto-btn[data-index="${i}"]`)
                        .removeClass('btn-pendiente')
                        .addClass('btn-completado');
                }
            });

            actualizarContador();

            if (action === 'success') {
                $('[id^="preview-"]').each(function () {
                    this.src = '#';
                    this.style.display = 'none';
                });

                $('[id^="btn-remove-"]').hide();
                $('input[type="file"][name^="Puntos"]').val('');
                $('#fotoCamaraBase64').val('');
                $('#Placa, #IdCajaTrailer, #Operador, #Empresa').val('');
            }

            function toggleCapturaCamara() {
                if ($('#checkCamaraIP').is(':checked')) {
                    capturarDesdeCamara();
                } else {
                    $('#fotoCamaraBase64').val("");
                }
            }

            toggleCapturaCamara();
            $('#checkCamaraIP').on('change', toggleCapturaCamara);

            $('form').on('submit', function (e) {
                // ✅ Validar solo las firmas obligatorias
                const firmasObligatorias = [
                    { id: 'firmaOperadorOrigenInput', nombre: 'Firma del Operador de Origen' },
                    { id: 'firmaOficialInput', nombre: 'Firma del Oficial' }
                ];

                for (const f of firmasObligatorias) {
                    if (!document.getElementById(f.id).value) {
                        alert(`⚠️ ${f.nombre} es obligatoria.`);
                        e.preventDefault();
                        return;
                    }
                }

                // Firma del supervisor es opcional (si quieres mostrar mensaje en consola):
                const firmaSupervisor = document.getElementById('firmaSupervisorInput')?.value;
                if (!firmaSupervisor) {
                    console.warn("ℹ️ Firma del Supervisor no proporcionada (opcional).");
                }

                // ✅ Validar que haya captura desde cámara si se activó
                if ($('#checkCamaraIP').is(':checked') && !$('#fotoCamaraBase64').val()) {
                    alert('Debes seleccionar una imagen de cámara IP para continuar.');
                    e.preventDefault();
                    return;
                }

                // 🔁 Sincronizar puntos del modal al formulario
                puntos.forEach((p, i) => {
                    const fields = `
        <input type="hidden" name="Puntos[${i}].Descripcion" value="${p.Descripcion ?? ''}" />
        <input type="hidden" name="Puntos[${i}].Cumple" value="${p.Cumple != null ? p.Cumple : ''}" />
        <input type="hidden" name="Puntos[${i}].Observaciones" value="${p.Observaciones ?? ''}" />
    `;

                    $(`#hidden-fields-${i}`).remove();
                    $('form').append(`<div id="hidden-fields-${i}" style="display:none;">${fields}</div>`);
                });

                // 🟢 Agregado: guardar arreglo de completados para que no se pierdan
                const completadosStr = JSON.stringify(completados);
                $('#hiddenCompletados').remove();
                $('form').append(`<input type="hidden" id="hiddenCompletados" name="CompletadosJson" value='${completadosStr}' />`);
            });





            // Click botón de punto
            $('.punto-btn').on('click', function () {
                const index = parseInt($(this).data('index'));
                const punto = puntos[index];

                const descripcion = punto.Descripcion || punto.descripcion || `Punto ${index + 1}`;
                const cumple = punto.Cumple === true ? 'true' : (punto.Cumple === false ? 'false' : '');
                const observaciones = punto.Observaciones ?? '';
                const tieneFoto = punto.FotoBase64 ? true : false;

                $('#modalPuntoLabel').text(`Punto ${index + 1}: ${descripcion}`);

                const html = `
                    <input type="hidden" name="Puntos[${index}].Descripcion" value="${descripcion}" />
                    <div class="row mb-2">
                               <div class="col-md-12"><strong>¿Cumple?</strong></div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-md-2">
                            <input type="radio" id="punto-${index}-true" name="Puntos[${index}].Cumple" value="true" ${cumple === 'true' ? 'checked' : ''} />
                            <label for="punto-${index}-true">Sí</label><br />
                            <input type="radio" id="punto-${index}-false" name="Puntos[${index}].Cumple" value="false" ${cumple === 'false' ? 'checked' : ''} />
                            <label for="punto-${index}-false">No</label>
                        </div>
                        <div class="col-md-5">
                            <input name="Puntos[${index}].Observaciones" class="form-control" placeholder="Observaciones" value="${observaciones}" />
                        </div>
                        <div class="col-md-5">
                            <label class="btn btn-primary btn-sm" onclick="document.getElementById('file-real-input-${index}').click();">
                                📷 Seleccionar
                             </label>

                            <br />
                            <img id="preview-${index}" class="img-preview mt-2" style="display: ${tieneFoto ? 'block' : 'none'};" src="${tieneFoto ? punto.FotoBase64 : '#'}" />
                            <br />
                            <button type="button" class="btn btn-outline-danger btn-sm mt-1" id="btn-remove-${index}" onclick="quitarVistaPreviaReal(${index})" style="display:${tieneFoto ? 'inline-block' : 'none'};">Quitar imagen</button>
                        </div>
                    </div>
                    <div class="text-end">
                        <button class="btn btn-success" type="button" onclick="marcarCompletado(${index})" data-bs-dismiss="modal">Guardar punto</button>
                    </div>
                `;

                $('#contenidoPunto').html(html);
            });
            for (let i = 0; i < 17; i++) {
                const input = document.getElementById(`file-real-input-${i}`);
                if (input) {
                    input.addEventListener('change', () => {
                        mostrarVistaPreviaReal(i);
                    });
                }
            }
        });

        function marcarCompletado(index) {
            const cumple = $(`input[name="Puntos[${index}].Cumple"]:checked`).val();
            const observaciones = $(`input[name="Puntos[${index}].Observaciones"]`).val();
            const descripcion = $(`input[name="Puntos[${index}].Descripcion"]`).val();

            puntos[index].Cumple = cumple === "true";
            puntos[index].Observaciones = observaciones;
            puntos[index].Descripcion = descripcion;

            completados[index] = true;

            // Marcar el botón de color verde
            $(`.punto-btn[data-index="${index}"]`)
                .removeClass('btn-pendiente')
                .addClass('btn-completado');

            actualizarContador();

            // ✅ Cerrar modal manualmente
            $('#modalPunto').modal('hide');
        }


        function actualizarContador() {
            const total = completados.filter(c => c).length;
            const restantes = 17 - total;
            const texto = restantes === 0
                ? "Todos los puntos han sido completados"
                : `${restantes} puntos restantes por llenar`;

            $('#contadorPuntos').text(texto);

            if (restantes === 0) {
                $('#mensajeCompletado').removeClass('d-none');
            } else {
                $('#mensajeCompletado').addClass('d-none');
            }
        }


        function mostrarVistaPreviaReal(index) {
            const input = document.getElementById(`file-real-input-${index}`);
            const file = input?.files?.[0];
            const maxWidth = 800;
            const maxHeight = 800;

            if (!file || !file.type.startsWith('image/')) return;

            const reader = new FileReader();
            reader.onload = function (e) {
                const img = new Image();
                img.src = e.target.result;

                img.onload = function () {
                    const canvas = document.createElement('canvas');
                    let width = img.width;
                    let height = img.height;

                    if (width > maxWidth || height > maxHeight) {
                        if (width > height) {
                            height *= maxWidth / width;
                            width = maxWidth;
                        } else {
                            width *= maxHeight / height;
                            height = maxHeight;
                        }
                    }

                    canvas.width = width;
                    canvas.height = height;

                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0, width, height);

                    canvas.toBlob(function (blob) {
                        const compressedURL = URL.createObjectURL(blob);
                        const preview = document.getElementById('preview-' + index);
                        preview.src = compressedURL;
                        preview.style.display = 'block';

                        const removeBtn = document.getElementById('btn-remove-' + index);
                        removeBtn.style.display = 'inline-block';

                        // Guardar base64 en el arreglo puntos[] (opcional para reabrir modal)
                        const reader2 = new FileReader();
                        reader2.onload = () => {
                            puntos[index].FotoBase64 = reader2.result;
                        };
                        reader2.readAsDataURL(blob);
                    }, 'image/jpeg', 0.75);
                };
            };

            reader.readAsDataURL(file);
        }


        function quitarVistaPreviaReal(index) {
            const preview = document.getElementById('preview-' + index);
            const removeBtn = document.getElementById('btn-remove-' + index);
            const inputFile = document.getElementById(`file-real-input-${index}`);

            // Ocultar vista previa y botón
            preview.src = '#';
            preview.style.display = 'none';
            removeBtn.style.display = 'none';

            // Limpiar input real
            if (inputFile) inputFile.value = "";

            // Limpiar base64 para evitar que reaparezca al reabrir
            if (puntos[index]) {
                puntos[index].FotoBase64 = null;
            }
        }


        function capturarDesdeCamara() {
            fetch("/Checklist/CapturaCamara")
                .then(res => res.json())
                .then(camaras => {
                    const contenedor = document.getElementById("imagenesCamaraPreview");
                    contenedor.innerHTML = "";

                    camaras.forEach((camara, index) => {
                        const div = document.createElement("div");
                        div.className = "preview-container text-center";

                        const label = document.createElement("p");
                        label.className = "font-weight-bold mb-1";
                        label.textContent = `Cámara ${camara.Numero || (index + 1)}`;
                        div.appendChild(label);

                        const img = document.createElement("img");
                        img.className = "img-preview mb-1";

                        if (camara.Estado === "ok") {
                            img.src = camara.Url;

                            const radio = document.createElement("input");
                            radio.type = "radio";
                            radio.name = "SeleccionCamara";
                            radio.value = camara.Url;
                            radio.onclick = () => {
                                document.getElementById("fotoCamaraBase64").value = camara.Url;
                            };

                            div.appendChild(radio);
                            div.appendChild(img);
                        } else {
                            img.src = "/uploads/camaras/camara-error.jpg";
                            img.alt = "Cámara sin conexión";

                            const msg = document.createElement("div");
                            msg.className = "text-danger font-italic small mt-1";
                            msg.innerHTML = "⚠ Cámara sin conexión o fuera de servicio";

                            div.appendChild(img);
                            div.appendChild(msg);
                        }

                        contenedor.appendChild(div);
                    });

                    document.getElementById("contenedorImagenesCamara").style.display = "block";
                })
                .catch(() => {
                    alert("Error al obtener las cámaras desde el servidor.");
                });
        }

        function guardarCaptura() {
            $("#modalCamara").modal('hide');
        }
    </script>
}



